/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/jobs/route";
exports.ids = ["app/api/jobs/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fjobs%2Froute&page=%2Fapi%2Fjobs%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fjobs%2Froute.ts&appDir=%2FUsers%2Fsankalp%2Ffs2%2Femail-scraper%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fsankalp%2Ffs2%2Femail-scraper&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fjobs%2Froute&page=%2Fapi%2Fjobs%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fjobs%2Froute.ts&appDir=%2FUsers%2Fsankalp%2Ffs2%2Femail-scraper%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fsankalp%2Ffs2%2Femail-scraper&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_sankalp_fs2_email_scraper_src_app_api_jobs_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/jobs/route.ts */ \"(rsc)/./src/app/api/jobs/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/jobs/route\",\n        pathname: \"/api/jobs\",\n        filename: \"route\",\n        bundlePath: \"app/api/jobs/route\"\n    },\n    resolvedPagePath: \"/Users/sankalp/fs2/email-scraper/src/app/api/jobs/route.ts\",\n    nextConfigOutput,\n    userland: _Users_sankalp_fs2_email_scraper_src_app_api_jobs_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZqb2JzJTJGcm91dGUmcGFnZT0lMkZhcGklMkZqb2JzJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGam9icyUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRnNhbmthbHAlMkZmczIlMkZlbWFpbC1zY3JhcGVyJTJGc3JjJTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRnNhbmthbHAlMkZmczIlMkZlbWFpbC1zY3JhcGVyJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNxQjtBQUNVO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix5R0FBbUI7QUFDM0M7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0RBQXNEO0FBQzlEO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzBGOztBQUUxRiIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMvc2Fua2FscC9mczIvZW1haWwtc2NyYXBlci9zcmMvYXBwL2FwaS9qb2JzL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9qb2JzL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvam9ic1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvam9icy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9Vc2Vycy9zYW5rYWxwL2ZzMi9lbWFpbC1zY3JhcGVyL3NyYy9hcHAvYXBpL2pvYnMvcm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICB3b3JrQXN5bmNTdG9yYWdlLFxuICAgICAgICB3b3JrVW5pdEFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fjobs%2Froute&page=%2Fapi%2Fjobs%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fjobs%2Froute.ts&appDir=%2FUsers%2Fsankalp%2Ffs2%2Femail-scraper%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fsankalp%2Ffs2%2Femail-scraper&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/auth/[...nextauth]/route.ts":
/*!*************************************************!*\
  !*** ./src/app/api/auth/[...nextauth]/route.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ handler),\n/* harmony export */   POST: () => (/* binding */ handler),\n/* harmony export */   authOptions: () => (/* binding */ authOptions)\n/* harmony export */ });\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth */ \"(rsc)/./node_modules/next-auth/index.js\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_auth__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth/providers/credentials */ \"(rsc)/./node_modules/next-auth/providers/credentials.js\");\n/* harmony import */ var _auth_prisma_adapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @auth/prisma-adapter */ \"(rsc)/./node_modules/@auth/prisma-adapter/index.js\");\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../lib/prisma */ \"(rsc)/./src/lib/prisma.ts\");\n/* harmony import */ var bcrypt__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! bcrypt */ \"bcrypt\");\n/* harmony import */ var bcrypt__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(bcrypt__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\n// Define hardcoded users\nconst USERS = [\n    {\n        username: \"lee\",\n        password: \"funnelstrike@135\"\n    },\n    {\n        username: \"sankalp\",\n        password: \"funnelstrike@135\"\n    }\n];\n// Function to initialize predefined users\nasync function ensureUsersExist() {\n    try {\n        for (const user of USERS){\n            const existingUser = await _lib_prisma__WEBPACK_IMPORTED_MODULE_3__.prisma.user.findUnique({\n                where: {\n                    email: `${user.username}@example.com`\n                }\n            });\n            if (!existingUser) {\n                const hashedPassword = await (0,bcrypt__WEBPACK_IMPORTED_MODULE_4__.hash)(user.password, 10);\n                await _lib_prisma__WEBPACK_IMPORTED_MODULE_3__.prisma.user.create({\n                    data: {\n                        name: user.username,\n                        email: `${user.username}@example.com`,\n                        password: hashedPassword\n                    }\n                });\n                console.log(`Created user: ${user.username}`);\n            }\n        }\n    } catch (error) {\n        console.error(\"Error initializing users:\", error);\n    }\n}\n// Initialize users when this file is first loaded\nensureUsersExist();\nconst authOptions = {\n    adapter: (0,_auth_prisma_adapter__WEBPACK_IMPORTED_MODULE_2__.PrismaAdapter)(_lib_prisma__WEBPACK_IMPORTED_MODULE_3__.prisma),\n    providers: [\n        (0,next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n            name: \"credentials\",\n            credentials: {\n                email: {\n                    label: \"Username\",\n                    type: \"text\"\n                },\n                password: {\n                    label: \"Password\",\n                    type: \"password\"\n                }\n            },\n            async authorize (credentials) {\n                if (!credentials?.email || !credentials?.password) {\n                    return null;\n                }\n                // Get email from username or use the email directly\n                const email = credentials.email.includes('@') ? credentials.email : `${credentials.email}@example.com`;\n                const user = await _lib_prisma__WEBPACK_IMPORTED_MODULE_3__.prisma.user.findUnique({\n                    where: {\n                        email\n                    }\n                });\n                if (!user || !user.password) {\n                    return null;\n                }\n                const isPasswordValid = await (0,bcrypt__WEBPACK_IMPORTED_MODULE_4__.compare)(credentials.password, user.password);\n                if (!isPasswordValid) {\n                    return null;\n                }\n                return {\n                    id: user.id,\n                    email: user.email,\n                    name: user.name\n                };\n            }\n        })\n    ],\n    session: {\n        strategy: \"jwt\"\n    },\n    secret: process.env.NEXTAUTH_SECRET,\n    debug: \"development\" === \"development\",\n    pages: {\n        signIn: \"/auth/signin\"\n    },\n    callbacks: {\n        async session ({ session, token }) {\n            if (token && session.user) {\n                session.user.id = token.sub;\n            }\n            return session;\n        }\n    }\n};\nconst handler = next_auth__WEBPACK_IMPORTED_MODULE_0___default()(authOptions);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9hdXRoL1suLi5uZXh0YXV0aF0vcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUEyRDtBQUNPO0FBQ2I7QUFDTDtBQUNUO0FBR3ZDLHlCQUF5QjtBQUN6QixNQUFNTSxRQUFRO0lBQ1o7UUFBRUMsVUFBVTtRQUFPQyxVQUFVO0lBQW1CO0lBQ2hEO1FBQUVELFVBQVU7UUFBV0MsVUFBVTtJQUFtQjtDQUNyRDtBQUVELDBDQUEwQztBQUMxQyxlQUFlQztJQUNiLElBQUk7UUFDRixLQUFLLE1BQU1DLFFBQVFKLE1BQU87WUFDeEIsTUFBTUssZUFBZSxNQUFNUiwrQ0FBTUEsQ0FBQ08sSUFBSSxDQUFDRSxVQUFVLENBQUM7Z0JBQ2hEQyxPQUFPO29CQUFFQyxPQUFPLEdBQUdKLEtBQUtILFFBQVEsQ0FBQyxZQUFZLENBQUM7Z0JBQUM7WUFDakQ7WUFFQSxJQUFJLENBQUNJLGNBQWM7Z0JBQ2pCLE1BQU1JLGlCQUFpQixNQUFNViw0Q0FBSUEsQ0FBQ0ssS0FBS0YsUUFBUSxFQUFFO2dCQUNqRCxNQUFNTCwrQ0FBTUEsQ0FBQ08sSUFBSSxDQUFDTSxNQUFNLENBQUM7b0JBQ3ZCQyxNQUFNO3dCQUNKQyxNQUFNUixLQUFLSCxRQUFRO3dCQUNuQk8sT0FBTyxHQUFHSixLQUFLSCxRQUFRLENBQUMsWUFBWSxDQUFDO3dCQUNyQ0MsVUFBVU87b0JBQ1o7Z0JBQ0Y7Z0JBQ0FJLFFBQVFDLEdBQUcsQ0FBQyxDQUFDLGNBQWMsRUFBRVYsS0FBS0gsUUFBUSxFQUFFO1lBQzlDO1FBQ0Y7SUFDRixFQUFFLE9BQU9jLE9BQU87UUFDZEYsUUFBUUUsS0FBSyxDQUFDLDZCQUE2QkE7SUFDN0M7QUFDRjtBQUVBLGtEQUFrRDtBQUNsRFo7QUFFTyxNQUFNYSxjQUEyQjtJQUN0Q0MsU0FBU3JCLG1FQUFhQSxDQUFDQywrQ0FBTUE7SUFDN0JxQixXQUFXO1FBQ1R2QiwyRUFBbUJBLENBQUM7WUFDbEJpQixNQUFNO1lBQ05PLGFBQWE7Z0JBQ1hYLE9BQU87b0JBQUVZLE9BQU87b0JBQVlDLE1BQU07Z0JBQU87Z0JBQ3pDbkIsVUFBVTtvQkFBRWtCLE9BQU87b0JBQVlDLE1BQU07Z0JBQVc7WUFDbEQ7WUFDQSxNQUFNQyxXQUFVSCxXQUFXO2dCQUN6QixJQUFJLENBQUNBLGFBQWFYLFNBQVMsQ0FBQ1csYUFBYWpCLFVBQVU7b0JBQ2pELE9BQU87Z0JBQ1Q7Z0JBRUEsb0RBQW9EO2dCQUNwRCxNQUFNTSxRQUFRVyxZQUFZWCxLQUFLLENBQUNlLFFBQVEsQ0FBQyxPQUNyQ0osWUFBWVgsS0FBSyxHQUNqQixHQUFHVyxZQUFZWCxLQUFLLENBQUMsWUFBWSxDQUFDO2dCQUV0QyxNQUFNSixPQUFPLE1BQU1QLCtDQUFNQSxDQUFDTyxJQUFJLENBQUNFLFVBQVUsQ0FBQztvQkFDeENDLE9BQU87d0JBQUVDO29CQUFNO2dCQUNqQjtnQkFFQSxJQUFJLENBQUNKLFFBQVEsQ0FBQ0EsS0FBS0YsUUFBUSxFQUFFO29CQUMzQixPQUFPO2dCQUNUO2dCQUVBLE1BQU1zQixrQkFBa0IsTUFBTTFCLCtDQUFPQSxDQUFDcUIsWUFBWWpCLFFBQVEsRUFBRUUsS0FBS0YsUUFBUTtnQkFFekUsSUFBSSxDQUFDc0IsaUJBQWlCO29CQUNwQixPQUFPO2dCQUNUO2dCQUVBLE9BQU87b0JBQ0xDLElBQUlyQixLQUFLcUIsRUFBRTtvQkFDWGpCLE9BQU9KLEtBQUtJLEtBQUs7b0JBQ2pCSSxNQUFNUixLQUFLUSxJQUFJO2dCQUNqQjtZQUNGO1FBQ0Y7S0FDRDtJQUNEYyxTQUFTO1FBQ1BDLFVBQVU7SUFDWjtJQUNBQyxRQUFRQyxRQUFRQyxHQUFHLENBQUNDLGVBQWU7SUFDbkNDLE9BQU9ILGtCQUF5QjtJQUNoQ0ksT0FBTztRQUNMQyxRQUFRO0lBQ1Y7SUFDQUMsV0FBVztRQUNULE1BQU1ULFNBQVEsRUFBRUEsT0FBTyxFQUFFVSxLQUFLLEVBQW9DO1lBQ2hFLElBQUlBLFNBQVNWLFFBQVF0QixJQUFJLEVBQUU7Z0JBQ3pCc0IsUUFBUXRCLElBQUksQ0FBQ3FCLEVBQUUsR0FBR1csTUFBTUMsR0FBRztZQUM3QjtZQUNBLE9BQU9YO1FBQ1Q7SUFDRjtBQUNGLEVBQUU7QUFFRixNQUFNWSxVQUFVNUMsZ0RBQVFBLENBQUNzQjtBQUNrQiIsInNvdXJjZXMiOlsiL1VzZXJzL3NhbmthbHAvZnMyL2VtYWlsLXNjcmFwZXIvc3JjL2FwcC9hcGkvYXV0aC9bLi4ubmV4dGF1dGhdL3JvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBOZXh0QXV0aCwgeyBBdXRoT3B0aW9ucywgU2Vzc2lvbiB9IGZyb20gXCJuZXh0LWF1dGhcIjtcbmltcG9ydCBDcmVkZW50aWFsc1Byb3ZpZGVyIGZyb20gXCJuZXh0LWF1dGgvcHJvdmlkZXJzL2NyZWRlbnRpYWxzXCI7XG5pbXBvcnQgeyBQcmlzbWFBZGFwdGVyIH0gZnJvbSBcIkBhdXRoL3ByaXNtYS1hZGFwdGVyXCI7XG5pbXBvcnQgeyBwcmlzbWEgfSBmcm9tIFwiLi4vLi4vLi4vLi4vbGliL3ByaXNtYVwiO1xuaW1wb3J0IHsgY29tcGFyZSwgaGFzaCB9IGZyb20gXCJiY3J5cHRcIjtcbmltcG9ydCB7IEpXVCB9IGZyb20gXCJuZXh0LWF1dGgvand0XCI7XG5cbi8vIERlZmluZSBoYXJkY29kZWQgdXNlcnNcbmNvbnN0IFVTRVJTID0gW1xuICB7IHVzZXJuYW1lOiBcImxlZVwiLCBwYXNzd29yZDogXCJmdW5uZWxzdHJpa2VAMTM1XCIgfSxcbiAgeyB1c2VybmFtZTogXCJzYW5rYWxwXCIsIHBhc3N3b3JkOiBcImZ1bm5lbHN0cmlrZUAxMzVcIiB9XG5dO1xuXG4vLyBGdW5jdGlvbiB0byBpbml0aWFsaXplIHByZWRlZmluZWQgdXNlcnNcbmFzeW5jIGZ1bmN0aW9uIGVuc3VyZVVzZXJzRXhpc3QoKSB7XG4gIHRyeSB7XG4gICAgZm9yIChjb25zdCB1c2VyIG9mIFVTRVJTKSB7XG4gICAgICBjb25zdCBleGlzdGluZ1VzZXIgPSBhd2FpdCBwcmlzbWEudXNlci5maW5kVW5pcXVlKHtcbiAgICAgICAgd2hlcmU6IHsgZW1haWw6IGAke3VzZXIudXNlcm5hbWV9QGV4YW1wbGUuY29tYCB9LFxuICAgICAgfSk7XG5cbiAgICAgIGlmICghZXhpc3RpbmdVc2VyKSB7XG4gICAgICAgIGNvbnN0IGhhc2hlZFBhc3N3b3JkID0gYXdhaXQgaGFzaCh1c2VyLnBhc3N3b3JkLCAxMCk7XG4gICAgICAgIGF3YWl0IHByaXNtYS51c2VyLmNyZWF0ZSh7XG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgbmFtZTogdXNlci51c2VybmFtZSxcbiAgICAgICAgICAgIGVtYWlsOiBgJHt1c2VyLnVzZXJuYW1lfUBleGFtcGxlLmNvbWAsXG4gICAgICAgICAgICBwYXNzd29yZDogaGFzaGVkUGFzc3dvcmQsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnNvbGUubG9nKGBDcmVhdGVkIHVzZXI6ICR7dXNlci51c2VybmFtZX1gKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluaXRpYWxpemluZyB1c2VyczpcIiwgZXJyb3IpO1xuICB9XG59XG5cbi8vIEluaXRpYWxpemUgdXNlcnMgd2hlbiB0aGlzIGZpbGUgaXMgZmlyc3QgbG9hZGVkXG5lbnN1cmVVc2Vyc0V4aXN0KCk7XG5cbmV4cG9ydCBjb25zdCBhdXRoT3B0aW9uczogQXV0aE9wdGlvbnMgPSB7XG4gIGFkYXB0ZXI6IFByaXNtYUFkYXB0ZXIocHJpc21hKSxcbiAgcHJvdmlkZXJzOiBbXG4gICAgQ3JlZGVudGlhbHNQcm92aWRlcih7XG4gICAgICBuYW1lOiBcImNyZWRlbnRpYWxzXCIsXG4gICAgICBjcmVkZW50aWFsczoge1xuICAgICAgICBlbWFpbDogeyBsYWJlbDogXCJVc2VybmFtZVwiLCB0eXBlOiBcInRleHRcIiB9LFxuICAgICAgICBwYXNzd29yZDogeyBsYWJlbDogXCJQYXNzd29yZFwiLCB0eXBlOiBcInBhc3N3b3JkXCIgfSxcbiAgICAgIH0sXG4gICAgICBhc3luYyBhdXRob3JpemUoY3JlZGVudGlhbHMpIHtcbiAgICAgICAgaWYgKCFjcmVkZW50aWFscz8uZW1haWwgfHwgIWNyZWRlbnRpYWxzPy5wYXNzd29yZCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IGVtYWlsIGZyb20gdXNlcm5hbWUgb3IgdXNlIHRoZSBlbWFpbCBkaXJlY3RseVxuICAgICAgICBjb25zdCBlbWFpbCA9IGNyZWRlbnRpYWxzLmVtYWlsLmluY2x1ZGVzKCdAJylcbiAgICAgICAgICA/IGNyZWRlbnRpYWxzLmVtYWlsXG4gICAgICAgICAgOiBgJHtjcmVkZW50aWFscy5lbWFpbH1AZXhhbXBsZS5jb21gO1xuXG4gICAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBwcmlzbWEudXNlci5maW5kVW5pcXVlKHtcbiAgICAgICAgICB3aGVyZTogeyBlbWFpbCB9LFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIXVzZXIgfHwgIXVzZXIucGFzc3dvcmQpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGlzUGFzc3dvcmRWYWxpZCA9IGF3YWl0IGNvbXBhcmUoY3JlZGVudGlhbHMucGFzc3dvcmQsIHVzZXIucGFzc3dvcmQpO1xuXG4gICAgICAgIGlmICghaXNQYXNzd29yZFZhbGlkKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGlkOiB1c2VyLmlkLFxuICAgICAgICAgIGVtYWlsOiB1c2VyLmVtYWlsLFxuICAgICAgICAgIG5hbWU6IHVzZXIubmFtZSxcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgfSksXG4gIF0sXG4gIHNlc3Npb246IHtcbiAgICBzdHJhdGVneTogXCJqd3RcIixcbiAgfSxcbiAgc2VjcmV0OiBwcm9jZXNzLmVudi5ORVhUQVVUSF9TRUNSRVQsXG4gIGRlYnVnOiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJkZXZlbG9wbWVudFwiLFxuICBwYWdlczoge1xuICAgIHNpZ25JbjogXCIvYXV0aC9zaWduaW5cIixcbiAgfSxcbiAgY2FsbGJhY2tzOiB7XG4gICAgYXN5bmMgc2Vzc2lvbih7IHNlc3Npb24sIHRva2VuIH06IHsgc2Vzc2lvbjogU2Vzc2lvbjsgdG9rZW46IEpXVCB9KSB7XG4gICAgICBpZiAodG9rZW4gJiYgc2Vzc2lvbi51c2VyKSB7XG4gICAgICAgIHNlc3Npb24udXNlci5pZCA9IHRva2VuLnN1YiBhcyBzdHJpbmc7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2Vzc2lvbjtcbiAgICB9LFxuICB9LFxufTtcblxuY29uc3QgaGFuZGxlciA9IE5leHRBdXRoKGF1dGhPcHRpb25zKTtcbmV4cG9ydCB7IGhhbmRsZXIgYXMgR0VULCBoYW5kbGVyIGFzIFBPU1QgfTsgIl0sIm5hbWVzIjpbIk5leHRBdXRoIiwiQ3JlZGVudGlhbHNQcm92aWRlciIsIlByaXNtYUFkYXB0ZXIiLCJwcmlzbWEiLCJjb21wYXJlIiwiaGFzaCIsIlVTRVJTIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsImVuc3VyZVVzZXJzRXhpc3QiLCJ1c2VyIiwiZXhpc3RpbmdVc2VyIiwiZmluZFVuaXF1ZSIsIndoZXJlIiwiZW1haWwiLCJoYXNoZWRQYXNzd29yZCIsImNyZWF0ZSIsImRhdGEiLCJuYW1lIiwiY29uc29sZSIsImxvZyIsImVycm9yIiwiYXV0aE9wdGlvbnMiLCJhZGFwdGVyIiwicHJvdmlkZXJzIiwiY3JlZGVudGlhbHMiLCJsYWJlbCIsInR5cGUiLCJhdXRob3JpemUiLCJpbmNsdWRlcyIsImlzUGFzc3dvcmRWYWxpZCIsImlkIiwic2Vzc2lvbiIsInN0cmF0ZWd5Iiwic2VjcmV0IiwicHJvY2VzcyIsImVudiIsIk5FWFRBVVRIX1NFQ1JFVCIsImRlYnVnIiwicGFnZXMiLCJzaWduSW4iLCJjYWxsYmFja3MiLCJ0b2tlbiIsInN1YiIsImhhbmRsZXIiLCJHRVQiLCJQT1NUIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/auth/[...nextauth]/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/app/api/jobs/route.ts":
/*!***********************************!*\
  !*** ./src/app/api/jobs/route.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth */ \"(rsc)/./node_modules/next-auth/index.js\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_auth__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _auth_nextauth_route__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../auth/[...nextauth]/route */ \"(rsc)/./src/app/api/auth/[...nextauth]/route.ts\");\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../lib/prisma */ \"(rsc)/./src/lib/prisma.ts\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var _lib_scraper__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../lib/scraper */ \"(rsc)/./src/lib/scraper.ts\");\n\n\n\n\n\n\n// GET /api/jobs - Get all jobs for the current user\nasync function GET(request) {\n    try {\n        // Check authentication\n        const session = await (0,next_auth__WEBPACK_IMPORTED_MODULE_1__.getServerSession)(_auth_nextauth_route__WEBPACK_IMPORTED_MODULE_2__.authOptions);\n        if (!session) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                message: 'Unauthorized'\n            }, {\n                status: 401\n            });\n        }\n        // Fetch all jobs for the current user\n        const jobs = await _lib_prisma__WEBPACK_IMPORTED_MODULE_3__.prisma.job.findMany({\n            where: {\n                userId: session.user.id\n            },\n            orderBy: {\n                createdAt: 'desc'\n            }\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            jobs\n        });\n    } catch (error) {\n        console.error('Get jobs error:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            message: 'Failed to fetch jobs'\n        }, {\n            status: 500\n        });\n    }\n}\n// POST /api/jobs - Create a new job\nasync function POST(request) {\n    try {\n        // Check authentication\n        const session = await (0,next_auth__WEBPACK_IMPORTED_MODULE_1__.getServerSession)(_auth_nextauth_route__WEBPACK_IMPORTED_MODULE_2__.authOptions);\n        if (!session) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                message: 'Unauthorized'\n            }, {\n                status: 401\n            });\n        }\n        // Parse request body\n        const { sheetUrl, columnName, jobName } = await request.json();\n        // Validate inputs\n        if (!sheetUrl || !columnName) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                message: 'Sheet URL and column name are required'\n            }, {\n                status: 400\n            });\n        }\n        // Extract the sheet ID from the URL\n        const sheetIdMatch = sheetUrl.match(/\\/d\\/([^/]+)/);\n        if (!sheetIdMatch || !sheetIdMatch[1]) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                message: 'Invalid Google Sheet URL'\n            }, {\n                status: 400\n            });\n        }\n        const sheetId = sheetIdMatch[1];\n        // Get the CSV export URL\n        const csvUrl = `https://docs.google.com/spreadsheets/d/${sheetId}/gviz/tq?tqx=out:csv`;\n        // Fetch the CSV data\n        const response = await axios__WEBPACK_IMPORTED_MODULE_5__[\"default\"].get(csvUrl, {\n            timeout: 10000\n        });\n        const csvData = response.data;\n        // Parse the CSV data\n        const parseCSV = (csv)=>{\n            const lines = csv.split('\\n');\n            if (lines.length === 0) {\n                return {\n                    headers: [],\n                    rows: []\n                };\n            }\n            // Parse headers (first row)\n            const headers = parseCSVRow(lines[0]);\n            // Parse data rows (skip header)\n            const rows = lines.slice(1).map((line)=>{\n                if (line.trim() === '') return {};\n                const rowValues = parseCSVRow(line);\n                // Create an object mapping headers to values\n                return headers.reduce((obj, header, i)=>{\n                    obj[header] = rowValues[i] || '';\n                    return obj;\n                }, {});\n            }).filter((row)=>Object.keys(row).length > 0);\n            return {\n                headers,\n                rows\n            };\n        };\n        // Helper to parse a CSV row, handling quoted fields\n        const parseCSVRow = (row)=>{\n            const fields = [];\n            let inQuotes = false;\n            let currentField = '';\n            for(let i = 0; i < row.length; i++){\n                const char = row[i];\n                if (char === '\"' && (i === 0 || row[i - 1] !== '\\\\')) {\n                    inQuotes = !inQuotes;\n                    continue;\n                }\n                if (char === ',' && !inQuotes) {\n                    fields.push(currentField.trim());\n                    currentField = '';\n                    continue;\n                }\n                currentField += char;\n            }\n            // Add the last field\n            fields.push(currentField.trim());\n            return fields.map((field)=>{\n                // Remove surrounding quotes\n                if (field.startsWith('\"') && field.endsWith('\"')) {\n                    return field.substring(1, field.length - 1);\n                }\n                return field;\n            });\n        };\n        const { headers, rows } = parseCSV(csvData);\n        // Ensure the specified column exists\n        if (!headers.includes(columnName)) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                message: `Column \"${columnName}\" not found in sheet`\n            }, {\n                status: 400\n            });\n        }\n        // Extract URLs from the specified column\n        const urls = rows.map((row)=>row[columnName]).filter((url)=>url && url.trim() !== '' && (url.startsWith('http') || url.startsWith('www.')));\n        if (urls.length === 0) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                message: 'No valid URLs found in the specified column'\n            }, {\n                status: 400\n            });\n        }\n        // Create a new job in the database\n        const job = await _lib_prisma__WEBPACK_IMPORTED_MODULE_3__.prisma.job.create({\n            data: {\n                sheetUrl,\n                columnName,\n                status: 'pending',\n                totalUrls: urls.length,\n                userId: session.user.id,\n                name: jobName || `${columnName} extraction`\n            }\n        });\n        // Start the scraping process in the background\n        (0,_lib_scraper__WEBPACK_IMPORTED_MODULE_4__.startEmailScraping)(job.id, urls);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            job\n        }, {\n            status: 201\n        });\n    } catch (error) {\n        console.error('Create job error:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            message: 'Failed to create job'\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/jobs/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/prisma.ts":
/*!***************************!*\
  !*** ./src/lib/prisma.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\n// PrismaClient is attached to the `global` object in development to prevent\n// exhausting your database connection limit.\n// Learn more: https://pris.ly/d/help/next-js-best-practices\nconst globalForPrisma = global;\nconst prisma = globalForPrisma.prisma || new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient({\n    log:  true ? [\n        'query',\n        'error',\n        'warn'\n    ] : 0\n});\nif (true) globalForPrisma.prisma = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3ByaXNtYS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBOEM7QUFFOUMsNEVBQTRFO0FBQzVFLDZDQUE2QztBQUM3Qyw0REFBNEQ7QUFFNUQsTUFBTUMsa0JBQWtCQztBQUVqQixNQUFNQyxTQUNYRixnQkFBZ0JFLE1BQU0sSUFDdEIsSUFBSUgsd0RBQVlBLENBQUM7SUFDZkksS0FBS0MsS0FBc0MsR0FBRztRQUFDO1FBQVM7UUFBUztLQUFPLEdBQUcsQ0FBUztBQUN0RixHQUFHO0FBRUwsSUFBSUEsSUFBcUMsRUFBRUosZ0JBQWdCRSxNQUFNLEdBQUdBIiwic291cmNlcyI6WyIvVXNlcnMvc2Fua2FscC9mczIvZW1haWwtc2NyYXBlci9zcmMvbGliL3ByaXNtYS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcmlzbWFDbGllbnQgfSBmcm9tICdAcHJpc21hL2NsaWVudCc7XG5cbi8vIFByaXNtYUNsaWVudCBpcyBhdHRhY2hlZCB0byB0aGUgYGdsb2JhbGAgb2JqZWN0IGluIGRldmVsb3BtZW50IHRvIHByZXZlbnRcbi8vIGV4aGF1c3RpbmcgeW91ciBkYXRhYmFzZSBjb25uZWN0aW9uIGxpbWl0LlxuLy8gTGVhcm4gbW9yZTogaHR0cHM6Ly9wcmlzLmx5L2QvaGVscC9uZXh0LWpzLWJlc3QtcHJhY3RpY2VzXG5cbmNvbnN0IGdsb2JhbEZvclByaXNtYSA9IGdsb2JhbCBhcyB1bmtub3duIGFzIHsgcHJpc21hOiBQcmlzbWFDbGllbnQgfTtcblxuZXhwb3J0IGNvbnN0IHByaXNtYSA9XG4gIGdsb2JhbEZvclByaXNtYS5wcmlzbWEgfHxcbiAgbmV3IFByaXNtYUNsaWVudCh7XG4gICAgbG9nOiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IFsncXVlcnknLCAnZXJyb3InLCAnd2FybiddIDogWydlcnJvciddLFxuICB9KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPSBwcmlzbWE7ICJdLCJuYW1lcyI6WyJQcmlzbWFDbGllbnQiLCJnbG9iYWxGb3JQcmlzbWEiLCJnbG9iYWwiLCJwcmlzbWEiLCJsb2ciLCJwcm9jZXNzIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/prisma.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/scraper.ts":
/*!****************************!*\
  !*** ./src/lib/scraper.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   startEmailScraping: () => (/* binding */ startEmailScraping)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var cheerio__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cheerio */ \"(rsc)/./node_modules/cheerio/dist/esm/index.js\");\n/* harmony import */ var _prisma__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./prisma */ \"(rsc)/./src/lib/prisma.ts\");\n/* harmony import */ var tldts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tldts */ \"(rsc)/./node_modules/tldts/dist/es6/index.js\");\n\n\n\n\n// Constants\nconst IGNORE_DOMAINS = [\n    \"wix.com\",\n    \"domain.com\",\n    \"example.com\",\n    \"sentry.io\",\n    \"wixpress.com\",\n    \"squarespace.com\",\n    \"wordpress.com\",\n    \"shopify.com\"\n];\nconst COMMON_EMAIL_DOMAINS = [\n    \"gmail.com\",\n    \"yahoo.com\",\n    \"outlook.com\",\n    \"hotmail.com\",\n    \"aol.com\",\n    \"icloud.com\",\n    \"protonmail.com\",\n    \"mail.com\",\n    \"zoho.com\",\n    \"yandex.com\",\n    \"gmx.com\"\n];\nconst CONTACT_PAGES = [\n    \"/contact\",\n    \"/contact-us\",\n    \"/contact.html\",\n    \"/contact-us.html\",\n    \"/about\",\n    \"/about-us\",\n    \"/about.html\",\n    \"/about-us.html\",\n    \"/get-in-touch\",\n    \"/reach-us\",\n    \"/connect\",\n    \"/reach-out\",\n    \"/our-team\",\n    \"/team\",\n    \"/support\",\n    \"/help\",\n    \"/info\",\n    // Add more variations\n    \"/contactus\",\n    \"/get-in-touch-with-us\",\n    \"/email-us\",\n    \"/email\",\n    \"/enquiry\",\n    \"/inquiry\",\n    \"/enquiries\",\n    \"/inquiries\",\n    \"/feedback\",\n    \"/write-to-us\",\n    \"/message-us\",\n    \"/connect-with-us\",\n    \"/talk-to-us\",\n    \"/reach-out-to-us\",\n    \"/drop-us-a-line\",\n    \"/say-hello\",\n    \"/ask-us\",\n    \"/meet-us\",\n    \"/meet-the-team\",\n    \"/staff\",\n    \"/meet-our-team\",\n    \"/company/team\",\n    \"/company/contact\",\n    \"/company/about\",\n    \"/company\",\n    \"/who-we-are\",\n    \"/lets-talk\"\n];\n// Function to extract emails from JSON-like objects\nfunction extractJsonEmails(obj) {\n    const found = [];\n    if (typeof obj === 'object' && obj !== null) {\n        if (Array.isArray(obj)) {\n            for (const item of obj){\n                found.push(...extractJsonEmails(item));\n            }\n        } else {\n            for (const [key, value] of Object.entries(obj)){\n                if (typeof value === 'string' && [\n                    'email',\n                    'mail',\n                    'contact'\n                ].some((k)=>key.toLowerCase().includes(k))) {\n                    if (value.includes('@') && value.includes('.')) {\n                        found.push(value);\n                    }\n                } else if (typeof value === 'object' && value !== null) {\n                    found.push(...extractJsonEmails(value));\n                }\n            }\n        }\n    }\n    return found;\n}\n/**\n * Start the email scraping process for a job\n */ async function startEmailScraping(jobId, urls) {\n    // Update job status to processing\n    await _prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.job.update({\n        where: {\n            id: jobId\n        },\n        data: {\n            status: 'processing'\n        }\n    });\n    try {\n        // Process each URL\n        let processedCount = 0;\n        // Process in batches to manage memory and avoid overwhelming the server\n        const batchSize = 5; // process 5 websites at a time\n        for(let i = 0; i < urls.length; i += batchSize){\n            const batch = urls.slice(i, i + batchSize);\n            await Promise.all(batch.map(async (url)=>{\n                try {\n                    // Fix URLs without protocol\n                    if (!url.startsWith('http')) {\n                        url = 'https://' + url;\n                    }\n                    // Extract emails from the website\n                    const emails = await extractEmails(url);\n                    // Save result to database\n                    await _prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.result.create({\n                        data: {\n                            jobId,\n                            website: url,\n                            email: emails.length > 0 ? emails[0] : null\n                        }\n                    });\n                    // For multiple emails, save additional results\n                    if (emails.length > 1) {\n                        for(let j = 1; j < emails.length; j++){\n                            await _prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.result.create({\n                                data: {\n                                    jobId,\n                                    website: url,\n                                    email: emails[j]\n                                }\n                            });\n                        }\n                    }\n                } catch (error) {\n                    console.error(`Error processing URL ${url}:`, error);\n                    // Save failed result\n                    await _prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.result.create({\n                        data: {\n                            jobId,\n                            website: url,\n                            email: null\n                        }\n                    });\n                } finally{\n                    // Update progress\n                    processedCount++;\n                    const progress = Math.round(processedCount / urls.length * 100);\n                    await _prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.job.update({\n                        where: {\n                            id: jobId\n                        },\n                        data: {\n                            processedUrls: processedCount,\n                            progress\n                        }\n                    });\n                }\n            }));\n            // Add small delay between batches to avoid overwhelming the system\n            await new Promise((resolve)=>setTimeout(resolve, 1000));\n        }\n        // Update job status to completed\n        await _prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.job.update({\n            where: {\n                id: jobId\n            },\n            data: {\n                status: 'completed',\n                progress: 100\n            }\n        });\n    } catch (error) {\n        console.error(`Error processing job ${jobId}:`, error);\n        // Update job status to failed\n        await _prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.job.update({\n            where: {\n                id: jobId\n            },\n            data: {\n                status: 'failed',\n                error: error instanceof Error ? error.message : 'Unknown error'\n            }\n        });\n    }\n}\n/**\n * Validate and clean email address\n */ function validateEmail(email) {\n    // Clean and validate the email format\n    email = email.trim().toLowerCase();\n    // Ignore image files and other non-email strings containing @ symbol\n    if (/\\.(png|jpg|jpeg|gif|svg|webp|ico)/.test(email)) {\n        return null;\n    }\n    // Remove any invalid start/end characters\n    email = email.replace(/^[^a-zA-Z0-9]+|[^a-zA-Z0-9.]+$/g, '');\n    // Check if the email follows a valid pattern\n    if (/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/.test(email)) {\n        // Ensure the email doesn't contain file extensions or other non-email patterns\n        const parts = email.split('@');\n        if (parts.length === 2 && parts[1].includes('.')) {\n            const domainPart = parts[1];\n            // Check if the domain part looks valid (not an image or file name)\n            if (!domainPart.match(/\\d+x\\d+/)) {\n                return email;\n            }\n        }\n    }\n    return null;\n}\n/**\n * Extract domain from URL\n */ function getDomain(url) {\n    try {\n        const parsed = (0,tldts__WEBPACK_IMPORTED_MODULE_2__.parse)(url);\n        return parsed.domain ? `${parsed.domain}.${parsed.publicSuffix}` : null;\n    } catch  {\n        return null;\n    }\n}\n/**\n * Clean and deduplicate emails\n */ function cleanAndDeduplicateEmails(emailsList) {\n    if (!emailsList || emailsList.length === 0) {\n        return [];\n    }\n    // First round of cleaning and deduplication\n    const cleanEmails = new Set();\n    emailsList.forEach((email)=>{\n        const validEmail = validateEmail(email);\n        if (validEmail) {\n            // Skip emails from the ignore domains\n            if (!IGNORE_DOMAINS.some((ignoreDomain)=>validEmail.includes(ignoreDomain))) {\n                cleanEmails.add(validEmail);\n            }\n        }\n    });\n    // Handle cases where one email is contained within another\n    const emailsToRemove = new Set();\n    const finalEmails = Array.from(cleanEmails);\n    for(let i = 0; i < finalEmails.length; i++){\n        for(let j = 0; j < finalEmails.length; j++){\n            if (i !== j && finalEmails[i] !== finalEmails[j]) {\n                // Split emails into username and domain parts\n                const email1Parts = finalEmails[i].split('@');\n                const email2Parts = finalEmails[j].split('@');\n                // Check if they have the same domain\n                if (email1Parts.length === 2 && email2Parts.length === 2 && email1Parts[1] === email2Parts[1]) {\n                    const username1 = email1Parts[0];\n                    const username2 = email2Parts[0];\n                    // If one username is contained within the other\n                    if (username1.includes(username2)) {\n                        // Keep the shorter one (assuming it's cleaner)\n                        emailsToRemove.add(finalEmails[i]);\n                    } else if (username2.includes(username1)) {\n                        emailsToRemove.add(finalEmails[j]);\n                    } else if (username1.includes('.') && username1.split('.').pop() === username2) {\n                        emailsToRemove.add(finalEmails[i]);\n                    } else if (username2.includes('.') && username2.split('.').pop() === username1) {\n                        emailsToRemove.add(finalEmails[j]);\n                    }\n                }\n            }\n        }\n    }\n    // Remove emails flagged for removal\n    const finalCleaned = finalEmails.filter((email)=>!emailsToRemove.has(email));\n    return finalCleaned;\n}\n/**\n * Extract emails from a website using multiple methods\n */ async function extractEmails(baseUrl) {\n    const emailsSet = new Set(); // Use set to store unique emails\n    const domain = getDomain(baseUrl);\n    // Process a single URL and extract emails\n    async function processUrl(url, isContactPage = false) {\n        const localEmails = new Set();\n        try {\n            const headers = {\n                \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\"\n            };\n            const response = await axios__WEBPACK_IMPORTED_MODULE_3__[\"default\"].get(url, {\n                headers,\n                timeout: 15000\n            });\n            const htmlContent = response.data;\n            const $ = cheerio__WEBPACK_IMPORTED_MODULE_0__.load(htmlContent);\n            // Method 1: Extract emails from visible text (more thorough)\n            const textContent = $('body').text();\n            const textEmails = textContent.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g) || [];\n            // Method 2: Enhanced mailto link extraction\n            const mailtoEmails = [];\n            $('a[href*=\"mailto:\"]').each((_, element)=>{\n                const href = $(element).attr('href') || '';\n                if (href.includes('mailto:')) {\n                    // Extract email from mailto: links\n                    const email = href.replace('mailto:', '').split('?')[0].trim();\n                    // Use decodeURIComponent to handle URL-encoded emails\n                    try {\n                        mailtoEmails.push(decodeURIComponent(email));\n                    } catch  {\n                        mailtoEmails.push(email);\n                    }\n                }\n            });\n            // Look for elements with mailto links but aren't properly marked as <a> tags\n            $('*[href*=\"mailto:\"], *[data-href*=\"mailto:\"], *[data-email], *[data-mail]').each((_, element)=>{\n                // Check various attributes\n                [\n                    'href',\n                    'data-href',\n                    'data-email',\n                    'data-mail',\n                    'onclick',\n                    'data-content'\n                ].forEach((attr)=>{\n                    const value = $(element).attr(attr) || '';\n                    if (value.includes('mailto:')) {\n                        const email = value.replace(/^.*mailto:/, '').split(/[?'\"]/)[0].trim();\n                        try {\n                            mailtoEmails.push(decodeURIComponent(email));\n                        } catch  {\n                            mailtoEmails.push(email);\n                        }\n                    }\n                });\n            });\n            // Also check for mailto links in onclick attributes and other handlers\n            $('*[onclick*=\"mailto:\"], *[href*=\"javascript\"], *[data-action*=\"mail\"]').each((_, element)=>{\n                const onclick = $(element).attr('onclick') || '';\n                const href = $(element).attr('href') || '';\n                const dataAction = $(element).attr('data-action') || '';\n                // Check onclick for mailto pattern\n                if (onclick.includes('mailto:')) {\n                    const matches = onclick.match(/mailto:([^'\"\\s)]+)/);\n                    if (matches && matches[1]) {\n                        try {\n                            mailtoEmails.push(decodeURIComponent(matches[1]));\n                        } catch  {\n                            mailtoEmails.push(matches[1]);\n                        }\n                    }\n                }\n                // Check javascript: href\n                if (href.includes('mail') || href.includes('contact')) {\n                    const matches = href.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g);\n                    if (matches) mailtoEmails.push(...matches);\n                }\n            });\n            // Method 3: Improved check for elements with email-related classes or IDs\n            const emailClasses = [\n                \"email\",\n                \"mail\",\n                \"e-mail\",\n                \"contact\",\n                \"email-address\",\n                \"mail-link\",\n                \"mini-contacts\",\n                \"footer-contact\",\n                \"header-contact\",\n                \"contact-info\",\n                \"contact-details\",\n                \"contact-email\",\n                \"footer-email\",\n                \"header-email\",\n                \"info\",\n                // Add more specific email-related classes and IDs\n                \"email-link\",\n                \"mail-to\",\n                \"mailto\",\n                \"email-button\",\n                \"mail-button\",\n                \"contact-button\",\n                \"email-us\",\n                \"mail-us\",\n                \"email-address-display\",\n                \"vcard\",\n                \"contact-card\",\n                \"business-card\",\n                \"contact-method\",\n                \"email-wrapper\"\n            ];\n            const classEmails = [];\n            // Look for elements with email-related classes\n            emailClasses.forEach((className)=>{\n                // Look for class attributes containing the className\n                $(`[class*=${className}], [id*=${className}]`).each((_, element)=>{\n                    // Extract email from text content\n                    const elementText = $(element).text();\n                    const emailMatches = elementText.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g);\n                    if (emailMatches) classEmails.push(...emailMatches);\n                    // Also check direct children text for emails\n                    $(element).children().each((_, child)=>{\n                        const childText = $(child).text();\n                        const childMatches = childText.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g);\n                        if (childMatches) classEmails.push(...childMatches);\n                    });\n                    // Check attributes for emails\n                    const attribs = $(element).prop('attribs') || {};\n                    Object.keys(attribs).forEach((attr)=>{\n                        const value = attribs[attr];\n                        if (typeof value === 'string' && value.includes('@')) {\n                            const matches = value.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g);\n                            if (matches) classEmails.push(...matches);\n                        }\n                    });\n                });\n            });\n            // Method 4: Extract from all tags and attributes (comprehensive scan)\n            const allTagsEmails = [];\n            $('*').each((_, element)=>{\n                // Check tag content\n                const text = $(element).text().trim();\n                if (text.includes('@')) {\n                    const emailMatches = text.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g);\n                    if (emailMatches) allTagsEmails.push(...emailMatches);\n                }\n                // Check all attributes for each element\n                const attribs = $(element).prop('attribs') || {};\n                Object.keys(attribs).forEach((attr)=>{\n                    const value = attribs[attr];\n                    if (typeof value === 'string' && value.includes('@')) {\n                        const matches = value.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g);\n                        if (matches) allTagsEmails.push(...matches);\n                    }\n                });\n            });\n            // Method 5: Special handling for contact pages to find emails\n            if (isContactPage) {\n                // Look for elements that are likely to contain contact information\n                $('section, div, article, aside, footer, p, span, li, dd, dt, h1, h2, h3, h4, h5, h6').each((_, element)=>{\n                    const $el = $(element);\n                    const text = $el.text();\n                    // Check if element contains text suggesting it's contact info\n                    if (/contact|email|mail|get in touch|connect|reach us|inquir(y|ies)/i.test(text) || text.includes('@') || COMMON_EMAIL_DOMAINS.some((domain)=>text.includes(domain))) {\n                        // Check for email patterns\n                        const emailMatches = text.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g);\n                        if (emailMatches) classEmails.push(...emailMatches);\n                        // If this element has an onclick or data-* attribute that might contain email info\n                        const onClick = $el.attr('onclick') || '';\n                        if (onClick.includes('mail') || onClick.includes('contact')) {\n                            const onClickMatches = onClick.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g);\n                            if (onClickMatches) classEmails.push(...onClickMatches);\n                        }\n                    }\n                });\n                // Look specifically for common patterns in contact pages\n                // 1. Look for \"Email:\" label followed by an email\n                $('*').each((_, element)=>{\n                    const text = $(element).text().trim();\n                    if (/^(Email|E-mail|Mail|Contact)(\\s*:|\\s*at)?\\s*$/i.test(text)) {\n                        // Check next sibling or parent's next sibling for email\n                        const sibling = $(element).next();\n                        const siblingText = sibling.text();\n                        const emailMatches = siblingText.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g);\n                        if (emailMatches) classEmails.push(...emailMatches);\n                    }\n                });\n                // 2. Look for contact form hidden recipients\n                $('form').each((_, form)=>{\n                    // Check form action for mailto\n                    const formAction = $(form).attr('action') || '';\n                    if (formAction.includes('mailto:')) {\n                        const email = formAction.replace('mailto:', '').split('?')[0].trim();\n                        mailtoEmails.push(email);\n                    }\n                    // Check all hidden inputs\n                    $('input', form).each((_, input)=>{\n                        const type = $(input).attr('type') || '';\n                        const name = $(input).attr('name') || '';\n                        const value = $(input).attr('value') || '';\n                        if ((type === 'hidden' || name.includes('recipient') || name.includes('email') || name.includes('to')) && value.includes('@')) {\n                            const matches = value.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g);\n                            if (matches) classEmails.push(...matches);\n                        }\n                    });\n                });\n            }\n            // Method 6: Extract from script tags more thoroughly, focusing on contact page scripts\n            const scriptEmails = [];\n            $('script').each((_, script)=>{\n                const content = $(script).html() || '';\n                // Look for script with contact-related content\n                if (content.includes('contact') || content.includes('email') || content.includes('mail') || content.includes('@gmail.com') || COMMON_EMAIL_DOMAINS.some((domain)=>content.includes(domain))) {\n                    // Look for explicit email field in JSON or JavaScript objects\n                    const emailPatterns = [\n                        /\"email\"\\s*:\\s*\"([^\"]+@[^\"]+\\.[^\"]+)\"/g,\n                        /\"emailAddress\"\\s*:\\s*\"([^\"]+@[^\"]+\\.[^\"]+)\"/g,\n                        /\"mail\"\\s*:\\s*\"([^\"]+@[^\"]+\\.[^\"]+)\"/g,\n                        /\"e-mail\"\\s*:\\s*\"([^\"]+@[^\"]+\\.[^\"]+)\"/g,\n                        /\"contactEmail\"\\s*:\\s*\"([^\"]+@[^\"]+\\.[^\"]+)\"/g,\n                        /\"support_email\"\\s*:\\s*\"([^\"]+@[^\"]+\\.[^\"]+)\"/g,\n                        /email\\s*[:=]\\s*['\"]([^'\"]+@[^'\"]+\\.[^'\"]+)['\"]/g,\n                        /var\\s+email\\s*=\\s*['\"]([^'\"]+@[^'\"]+\\.[^'\"]+)['\"]/g\n                    ];\n                    emailPatterns.forEach((pattern)=>{\n                        let matches;\n                        while((matches = pattern.exec(content)) !== null){\n                            if (matches[1]) scriptEmails.push(matches[1]);\n                        }\n                    });\n                    // Also extract general email pattern more aggressively\n                    const generalMatches = content.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g);\n                    if (generalMatches) scriptEmails.push(...generalMatches);\n                    // Check for email obfuscation via concatenation\n                    const concatPatterns = [\n                        /['\"][^'\"]*@[^'\"]*['\"]\\s*\\+\\s*['\"]/,\n                        /['\"][^'\"]*\\.[^'\"]*['\"](\\s*\\+\\s*['\"][^'\"]*\\.)/,\n                        /string\\.replace\\(/\n                    ];\n                    if (concatPatterns.some((pattern)=>pattern.test(content))) {\n                        // Extract all string literals\n                        const stringLiterals = content.match(/(['\"])(?:(?!\\1).|\\\\.)*?\\1/g) || [];\n                        const joined = stringLiterals.map((s)=>s.replace(/^['\"]|['\"]$/g, '')).join('');\n                        // Check if the joined string contains email patterns\n                        const joinedMatches = joined.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g);\n                        if (joinedMatches) scriptEmails.push(...joinedMatches);\n                    }\n                    // Try to find JavaScript email obfuscation\n                    if (content.includes('fromCharCode') || content.includes('decode') || content.includes('atob')) {\n                        // Look for common character code patterns\n                        const codeMatches = content.match(/String\\.fromCharCode\\(([^)]+)\\)/g);\n                        if (codeMatches) {\n                            codeMatches.forEach((match)=>{\n                                try {\n                                    // Try to evaluate the fromCharCode expression\n                                    const charCodes = match.match(/\\(([^)]+)\\)/)?.[1].split(',').map((c)=>parseInt(c.trim(), 10));\n                                    if (charCodes && !charCodes.some(isNaN)) {\n                                        const decoded = String.fromCharCode(...charCodes);\n                                        const emailMatch = decoded.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g);\n                                        if (emailMatch) scriptEmails.push(...emailMatch);\n                                    }\n                                } catch (e) {\n                                // Ignore errors in decoding\n                                }\n                            });\n                        }\n                        // Check for base64 encoded emails\n                        const base64Matches = content.match(/atob\\(['\"](.*?)['\"]\\)/g);\n                        if (base64Matches) {\n                            base64Matches.forEach((match)=>{\n                                try {\n                                    const encoded = match.match(/atob\\(['\"](.*?)['\"]\\)/)?.[1];\n                                    if (encoded) {\n                                        try {\n                                            const decoded = Buffer.from(encoded, 'base64').toString();\n                                            const emailMatch = decoded.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g);\n                                            if (emailMatch) scriptEmails.push(...emailMatch);\n                                        } catch (e) {\n                                        // Ignore errors in decoding\n                                        }\n                                    }\n                                } catch (e) {\n                                // Ignore errors in regex or decoding\n                                }\n                            });\n                        }\n                    }\n                }\n                // Try to parse any JSON objects in the script\n                try {\n                    // Extract any JSON-like structures\n                    const jsonMatches = content.match(/\\{[^{}]*\\}/g) || [];\n                    for (const jsonStr of jsonMatches){\n                        try {\n                            const data = JSON.parse(jsonStr);\n                            const jsonEmails = extractJsonEmails(data);\n                            scriptEmails.push(...jsonEmails);\n                        } catch  {\n                        // Ignore invalid JSON\n                        }\n                    }\n                } catch  {\n                // Ignore errors in JSON parsing\n                }\n            });\n            // Method 7: Extract from meta tags\n            const metaEmails = [];\n            $('meta').each((_, meta)=>{\n                const content = $(meta).attr('content') || '';\n                const name = $(meta).attr('name') || '';\n                const property = $(meta).attr('property') || '';\n                // Look specifically for contact metadata\n                if (name.includes('contact') || name.includes('email') || name.includes('mail') || property.includes('contact') || property.includes('email') || property.includes('mail') || content.includes('@')) {\n                    const matches = content.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g);\n                    if (matches) metaEmails.push(...matches);\n                }\n            });\n            // Method 8: Look specifically for common email domains in the entire HTML content\n            const domainBasedEmails = [];\n            // Enhanced pattern that looks specifically for email patterns with common domains\n            COMMON_EMAIL_DOMAINS.forEach((emailDomain)=>{\n                const domainPattern = new RegExp(`[a-zA-Z0-9._%+-]+@${emailDomain.replace('.', '\\\\.')}`, 'g');\n                const matches = htmlContent.match(domainPattern);\n                if (matches) domainBasedEmails.push(...matches);\n            });\n            // Method 9: Check for obfuscated emails\n            const obfuscatedEmails = [];\n            // Look for emails where @ is replaced with text or entities\n            const obfuscatedPatterns = [\n                /([a-zA-Z0-9._%+-]+)\\s*(?:&#64;|[@\\(\\{\\[]\\s*at\\s*[\\)\\}\\]]|[@\\(\\{\\[]at[\\)\\}\\]]|\\s+at\\s+|@)([a-zA-Z0-9.-]+)\\.([a-zA-Z]{2,})/gi,\n                /<span[^>]*>([^<]*)<\\/span>\\s*(?:&#64;|@)\\s*<span[^>]*>([^<]*)<\\/span>/gi,\n                /([a-zA-Z0-9._%+-]+)\\s*\\[at\\]\\s*([a-zA-Z0-9.-]+)\\s*\\[dot\\]\\s*([a-zA-Z]{2,})/gi,\n                /([a-zA-Z0-9._%+-]+)\\s*\\(at\\)\\s*([a-zA-Z0-9.-]+)\\s*\\(dot\\)\\s*([a-zA-Z]{2,})/gi\n            ];\n            const bodyHtml = $('body').html() || '';\n            obfuscatedPatterns.forEach((pattern)=>{\n                let matches;\n                while((matches = pattern.exec(bodyHtml)) !== null){\n                    const username = matches[1]?.trim();\n                    const domain = matches[2]?.trim();\n                    const tld = matches[3]?.trim();\n                    if (username && domain) {\n                        const reconstructed = `${username}@${domain}${tld ? '.' + tld : ''}`;\n                        if (reconstructed.includes('@') && reconstructed.includes('.')) {\n                            obfuscatedEmails.push(reconstructed);\n                        }\n                    }\n                }\n            });\n            // Method 10: Look for reversed or encoded emails in the DOM\n            const encodedEmails = [];\n            // Check for reversed emails in text or attributes\n            $('*').each((_, element)=>{\n                const text = $(element).text();\n                if (text.includes('.') && text.includes('@')) {\n                    // Try reversing the text to see if it's a reversed email\n                    const reversed = text.split('').reverse().join('');\n                    const emailMatches = reversed.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g);\n                    if (emailMatches) encodedEmails.push(...emailMatches);\n                }\n                // Check for encoded emails in data attributes\n                const encodedAttrs = [\n                    'data-email',\n                    'data-mail',\n                    'data-encoded-email'\n                ];\n                encodedAttrs.forEach((attr)=>{\n                    const value = $(element).attr(attr);\n                    if (value) {\n                        // Try various decodings\n                        try {\n                            // Base64\n                            const decoded = Buffer.from(value, 'base64').toString();\n                            const emailMatches = decoded.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g);\n                            if (emailMatches) encodedEmails.push(...emailMatches);\n                        } catch  {\n                        // Not base64, try other methods\n                        }\n                        // Hex encoding\n                        try {\n                            if (/^[0-9a-f]+$/i.test(value)) {\n                                const decoded = Buffer.from(value, 'hex').toString();\n                                const emailMatches = decoded.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g);\n                                if (emailMatches) encodedEmails.push(...emailMatches);\n                            }\n                        } catch  {\n                        // Not hex encoded\n                        }\n                        // URL encoding\n                        try {\n                            const decoded = decodeURIComponent(value);\n                            const emailMatches = decoded.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}/g);\n                            if (emailMatches) encodedEmails.push(...emailMatches);\n                        } catch  {\n                        // Not URL encoded\n                        }\n                    }\n                });\n            });\n            // Combine all emails\n            const allExtractedEmails = [\n                ...textEmails,\n                ...mailtoEmails,\n                ...classEmails,\n                ...allTagsEmails,\n                ...scriptEmails,\n                ...metaEmails,\n                ...domainBasedEmails,\n                ...obfuscatedEmails,\n                ...encodedEmails\n            ];\n            // Clean and add valid emails to the local set\n            allExtractedEmails.forEach((email)=>{\n                const validEmail = validateEmail(email);\n                if (validEmail && !IGNORE_DOMAINS.some((domain)=>validEmail.includes(domain))) {\n                    localEmails.add(validEmail);\n                }\n            });\n        } catch (error) {\n            console.error(`Error processing URL ${url}:`, error);\n        }\n        return localEmails;\n    }\n    // First process the main URL\n    const mainPageEmails = await processUrl(baseUrl);\n    mainPageEmails.forEach((email)=>emailsSet.add(email));\n    // Then process ALL contact pages regardless of how many emails we found\n    // This is important to catch emails that might only be on contact pages\n    for (const contactPath of CONTACT_PAGES){\n        try {\n            const contactUrl = new URL(contactPath, baseUrl).toString();\n            if (contactUrl !== baseUrl) {\n                console.log(`Checking contact page: ${contactUrl}`);\n                const contactPageEmails = await processUrl(contactUrl, true);\n                contactPageEmails.forEach((email)=>emailsSet.add(email));\n            }\n        } catch (error) {\n            continue;\n        }\n    }\n    // Clean and deduplicate emails\n    const allEmails = cleanAndDeduplicateEmails(Array.from(emailsSet));\n    // Prioritize emails with domain matching the website\n    const domainEmails = domain ? allEmails.filter((email)=>email.includes(domain)) : [];\n    const otherEmails = allEmails.filter((email)=>!domainEmails.includes(email));\n    // Sort emails with domain emails first\n    const sortedEmails = [\n        ...domainEmails.sort(),\n        ...otherEmails.sort()\n    ];\n    return sortedEmails;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/scraper.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("@prisma/client");

/***/ }),

/***/ "@prisma/client/runtime/library":
/*!*************************************************!*\
  !*** external "@prisma/client/runtime/library" ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@prisma/client/runtime/library");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "bcrypt":
/*!*************************!*\
  !*** external "bcrypt" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("bcrypt");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "node:assert":
/*!******************************!*\
  !*** external "node:assert" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:assert");

/***/ }),

/***/ "node:async_hooks":
/*!***********************************!*\
  !*** external "node:async_hooks" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:async_hooks");

/***/ }),

/***/ "node:buffer":
/*!******************************!*\
  !*** external "node:buffer" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:buffer");

/***/ }),

/***/ "node:console":
/*!*******************************!*\
  !*** external "node:console" ***!
  \*******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:console");

/***/ }),

/***/ "node:crypto":
/*!******************************!*\
  !*** external "node:crypto" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:crypto");

/***/ }),

/***/ "node:diagnostics_channel":
/*!*******************************************!*\
  !*** external "node:diagnostics_channel" ***!
  \*******************************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:diagnostics_channel");

/***/ }),

/***/ "node:dns":
/*!***************************!*\
  !*** external "node:dns" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:dns");

/***/ }),

/***/ "node:events":
/*!******************************!*\
  !*** external "node:events" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:events");

/***/ }),

/***/ "node:http":
/*!****************************!*\
  !*** external "node:http" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:http");

/***/ }),

/***/ "node:http2":
/*!*****************************!*\
  !*** external "node:http2" ***!
  \*****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:http2");

/***/ }),

/***/ "node:net":
/*!***************************!*\
  !*** external "node:net" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:net");

/***/ }),

/***/ "node:perf_hooks":
/*!**********************************!*\
  !*** external "node:perf_hooks" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:perf_hooks");

/***/ }),

/***/ "node:querystring":
/*!***********************************!*\
  !*** external "node:querystring" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:querystring");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:stream");

/***/ }),

/***/ "node:tls":
/*!***************************!*\
  !*** external "node:tls" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:tls");

/***/ }),

/***/ "node:url":
/*!***************************!*\
  !*** external "node:url" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:url");

/***/ }),

/***/ "node:util":
/*!****************************!*\
  !*** external "node:util" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:util");

/***/ }),

/***/ "node:util/types":
/*!**********************************!*\
  !*** external "node:util/types" ***!
  \**********************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:util/types");

/***/ }),

/***/ "node:worker_threads":
/*!**************************************!*\
  !*** external "node:worker_threads" ***!
  \**************************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:worker_threads");

/***/ }),

/***/ "node:zlib":
/*!****************************!*\
  !*** external "node:zlib" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:zlib");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("querystring");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "string_decoder":
/*!*********************************!*\
  !*** external "string_decoder" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("string_decoder");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/next-auth","vendor-chunks/@babel","vendor-chunks/jose","vendor-chunks/openid-client","vendor-chunks/oauth","vendor-chunks/object-hash","vendor-chunks/preact","vendor-chunks/uuid","vendor-chunks/yallist","vendor-chunks/preact-render-to-string","vendor-chunks/lru-cache","vendor-chunks/cookie","vendor-chunks/@auth","vendor-chunks/oidc-token-hash","vendor-chunks/@panva","vendor-chunks/undici","vendor-chunks/axios","vendor-chunks/iconv-lite","vendor-chunks/cheerio","vendor-chunks/parse5","vendor-chunks/css-select","vendor-chunks/tldts-core","vendor-chunks/asynckit","vendor-chunks/entities","vendor-chunks/domutils","vendor-chunks/math-intrinsics","vendor-chunks/es-errors","vendor-chunks/whatwg-mimetype","vendor-chunks/call-bind-apply-helpers","vendor-chunks/debug","vendor-chunks/nth-check","vendor-chunks/htmlparser2","vendor-chunks/cheerio-select","vendor-chunks/whatwg-encoding","vendor-chunks/tldts","vendor-chunks/get-proto","vendor-chunks/encoding-sniffer","vendor-chunks/domhandler","vendor-chunks/dom-serializer","vendor-chunks/mime-db","vendor-chunks/has-symbols","vendor-chunks/gopd","vendor-chunks/function-bind","vendor-chunks/form-data","vendor-chunks/follow-redirects","vendor-chunks/css-what","vendor-chunks/parse5-parser-stream","vendor-chunks/parse5-htmlparser2-tree-adapter","vendor-chunks/domelementtype","vendor-chunks/supports-color","vendor-chunks/has-flag","vendor-chunks/safer-buffer","vendor-chunks/proxy-from-env","vendor-chunks/ms","vendor-chunks/mime-types","vendor-chunks/hasown","vendor-chunks/has-tostringtag","vendor-chunks/get-intrinsic","vendor-chunks/es-set-tostringtag","vendor-chunks/es-object-atoms","vendor-chunks/es-define-property","vendor-chunks/dunder-proto","vendor-chunks/delayed-stream","vendor-chunks/combined-stream","vendor-chunks/boolbase"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fjobs%2Froute&page=%2Fapi%2Fjobs%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fjobs%2Froute.ts&appDir=%2FUsers%2Fsankalp%2Ffs2%2Femail-scraper%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fsankalp%2Ffs2%2Femail-scraper&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();