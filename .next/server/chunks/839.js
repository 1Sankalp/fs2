"use strict";exports.id=839,exports.ids=[839],exports.modules={11323:(e,t,o)=>{o.d(t,{XX:()=>c,YQ:()=>i,bt:()=>d,t7:()=>l,wv:()=>u});var r=o(31183),s=o(84113);let a=new Map,n=()=>{},l={set:(e,t)=>{a.set(e,t),n()},get:e=>a.get(e),has:e=>a.has(e),delete:e=>{let t=a.delete(e);return n(),t},clear:()=>{a.clear(),n()},size:()=>null==a?0:a.size,values:()=>null==a?[]:Array.from(a.values()),getJobsForUser:e=>null==a?[]:Array.from(a.values()).filter(t=>t.userId===e),generateJobId:()=>(0,s.A)()};async function i(e){let t=l.get(e);if(t)return t;try{let t=(0,r.b)(),o=await t.job.findUnique({where:{id:e},include:{results:!0}});if(!o)return null;let s={id:o.id,name:o.name||"Unnamed Job",status:o.status,sheetUrl:o.sheetUrl,columnName:o.columnName,totalWebsites:o.totalUrls,processedWebsites:o.results.length,results:o.results.map(e=>({website:e.website,email:e.email||null})),createdAt:o.createdAt.toISOString(),updatedAt:o.updatedAt.toISOString(),userId:o.userId};return l.set(e,s),await t.$disconnect(),s}catch(t){return console.error(`Error fetching job ${e} from database:`,t),null}}async function c(e){console.log(`Attempting to delete job: ${e}`);let t=!1,o=!1;try{if(l.has(e)){let o=l.get(e);console.log(`Found job ${e} in memory, user: ${o?.userId}, status: ${o?.status}`),t=l.delete(e),console.log(`Deleted job ${e} from memory: ${t?"success":"failed"}`)}else console.log(`Job ${e} not found in memory store`);try{let t=(0,r.b)();if(await t.job.findUnique({where:{id:e},select:{id:!0}})){try{console.log(`Deleting results for job ${e}...`);let o=await t.result.deleteMany({where:{jobId:e}});console.log(`Deleted ${o.count} results for job ${e}`)}catch(t){console.error(`Error deleting results for job ${e}:`,t)}try{console.log(`Deleting job ${e} from database...`),await t.job.delete({where:{id:e}}),console.log(`Successfully deleted job ${e} from database`),o=!0}catch(t){console.error(`Error deleting job ${e} from database:`,t),o=!1}}else console.log(`Job ${e} not found in database, nothing to delete`),o=!0;await t.$disconnect()}catch(t){console.error(`Database error while deleting job ${e}:`,t),o=!1}}catch(o){console.error(`Critical error deleting job ${e}:`,o),l.has(e)&&(console.log(`Forcing memory deletion for job ${e} after error`),t=l.delete(e))}return t||o}async function d(e){if(!l.has(e))return console.log(`Job ${e} not found in memory store for syncing`),!1;let t=l.get(e);if(!t)return!1;try{let o=(0,r.b)();if(console.log(`Syncing job ${e} to database - Status: ${t.status}, Progress: ${t.progress}`),await o.job.update({where:{id:e},data:{status:t.status,progress:t.progress||0}}),t.results&&t.results.length>0)for(let r of(console.log(`Syncing ${t.results.length} results for job ${e}`),t.results))await o.result.findFirst({where:{jobId:e,website:r.website}})||await o.result.create({data:{jobId:e,website:r.website,email:r.email||null}});return await o.$disconnect(),!0}catch(t){return console.error(`Error syncing job ${e} to database:`,t),!1}}async function u(){l.size(),console.log(`In-memory jobs before database load: ${l.size()}`);try{console.log("Loading hardcoded user jobs from database");let e=(0,r.b)(),t=await e.job.findMany({where:{userId:{startsWith:"hardcoded-"}},include:{results:!0}});for(let e of(console.log(`Found ${t.length} jobs for hardcoded users in database`),t)){let t=e.id,o=l.get(t),r={id:e.id,name:e.name||"Unnamed Job",status:e.status,sheetUrl:e.sheetUrl,columnName:e.columnName,totalWebsites:e.totalUrls,processedWebsites:e.results.length,progress:e.progress||0,results:e.results.map(e=>({website:e.website,email:e.email})),createdAt:e.createdAt.toISOString(),updatedAt:e.updatedAt.toISOString(),userId:e.userId};if(o){let s=new Date(e.updatedAt),a=new Date(o.updatedAt);s>a?(console.log(`Job ${t} found in both memory and database - using newer database version`),l.set(t,r)):console.log(`Job ${t} found in both memory and database - keeping memory version`)}else console.log(`Job ${t} found only in database - adding to memory`),l.set(t,r)}let o=new Set(t.map(e=>e.id)),s=l.values().filter(e=>!o.has(e.id));console.log(`Found ${s.length} jobs in memory that are not in database`),await e.$disconnect(),console.log(`Final job count in memory store: ${l.size()}`),console.log(`In-memory jobs map status - Size: ${l.size()}`),l.values().forEach(e=>{console.log(`Memory job: ${e.id} - User: ${e.userId} - Status: ${e.status} - Created: ${e.createdAt}`)})}catch(e){console.error("Error loading jobs from database:",e)}}},12909:(e,t,o)=>{o.d(t,{Nh:()=>d,_W:()=>l});var r=o(13581);o(16467);var s=o(31183),a=o(5486);o(96330);let n=[{username:"lee",password:"funnelstrike@135"},{username:"sankalp",password:"funnelstrike@135"}];async function l(){let e=(0,s.b)();try{for(let t of n)try{let o=`hardcoded-${t.username.toLowerCase()}`;if(await e.user.findUnique({where:{id:o}}))console.log(`Hardcoded user ${o} already exists`);else{let r=await (0,a.hash)(t.password,10);await e.user.create({data:{id:o,name:t.username,email:`${t.username}@example.com`,password:r}}),console.log(`Created hardcoded user: ${o}`)}}catch(e){console.error(`Error processing user ${t.username}:`,e)}}catch(e){console.error("Error initializing users:",e)}finally{await e.$disconnect()}}let i={adapter:void 0,client:void 0};async function c(e,t){let o=[{username:"sankalp",password:"funnelstrike@135",name:"Sankalp Demo"},{username:"lee",password:"funnelstrike@135",name:"Lee Demo"}].find(o=>o.username===e&&o.password===t);return o?{id:`hardcoded-${o.username}`,name:o.name,email:`${o.username}@example.com`}:null}i.client&&process.on("beforeExit",()=>{i.client?.$disconnect()});let d={...i.adapter?{adapter:i.adapter}:{},providers:[(0,r.A)({name:"credentials",credentials:{email:{label:"Username",type:"text"},password:{label:"Password",type:"password"}},async authorize(e){if(!e?.email||!e?.password)return null;try{e.email.includes("@"),e.email;let t=await c(e.email,e.password);if(t)return t;return null}catch(e){return console.error("Authentication error:",e),null}}})],session:{strategy:"jwt"},secret:process.env.NEXTAUTH_SECRET,debug:!1,pages:{signIn:"/auth/signin"},callbacks:{session:async({session:e,token:t})=>(t&&e.user&&(e.user.id=t.sub),e)}}},31183:(e,t,o)=>{o.d(t,{b:()=>a});var r=o(96330);let s=0;function a(){let e=++s;console.log(`Creating new Prisma client instance #${e}`);try{let t=process.env.DATABASE_URL||"";if(!t)throw console.error("DATABASE_URL is not defined in environment variables"),Error("Database connection string is missing");let o=process.env.POSTGRES_URL_NON_POOLING||t,s=o.includes("?")?`${o}&connection_limit=1&pool_timeout=20&connect_timeout=10&statement_cache_size=0&connection_id=${e}`:`${o}?connection_limit=1&pool_timeout=20&connect_timeout=10&statement_cache_size=0&connection_id=${e}`,a=new r.PrismaClient({datasourceUrl:s,log:["error"]}),n=a.$connect.bind(a);return a.$connect=async()=>{let t;for(let o=1;o<=3;o++)try{return console.log(`Connection attempt ${o} for client #${e}`),await n()}catch(e){if(t=e,console.error(`Connection attempt ${o} failed:`,e),o<3){let e=500*Math.pow(3,o-1);console.log(`Retrying in ${e}ms...`),await new Promise(t=>setTimeout(t,e))}}throw t},a}catch(e){return console.error("Failed to create Prisma client:",e),new r.PrismaClient}}global.prisma||(global.prisma=(()=>{try{return console.log("Creating global Prisma client instance"),new r.PrismaClient({log:["error"]})}catch(e){throw console.error("Failed to create global Prisma client:",e),e}})())}};