"use strict";exports.id=839,exports.ids=[839],exports.modules={11323:(e,s,r)=>{r.d(s,{bt:()=>i,t7:()=>l,wv:()=>d});var t=r(31183),a=r(84113);let o=new Map,n=()=>{},l={set:(e,s)=>{o.set(e,s),n()},get:e=>o.get(e),has:e=>o.has(e),delete:e=>{let s=o.delete(e);return n(),s},clear:()=>{o.clear(),n()},size:()=>null==o?0:o.size,values:()=>null==o?[]:Array.from(o.values()),getJobsForUser:e=>null==o?[]:Array.from(o.values()).filter(s=>s.userId===e),generateJobId:()=>(0,a.A)()};async function i(e){if(!l.has(e))return console.log(`Job ${e} not found in memory store for syncing`),!1;let s=l.get(e);if(!s)return!1;try{let r=(0,t.b)();if(console.log(`Syncing job ${e} to database - Status: ${s.status}, Progress: ${s.progress}`),await r.job.update({where:{id:e},data:{status:s.status,progress:s.progress||0}}),s.results&&s.results.length>0)for(let t of(console.log(`Syncing ${s.results.length} results for job ${e}`),s.results))await r.result.findFirst({where:{jobId:e,website:t.website}})||await r.result.create({data:{jobId:e,website:t.website,email:t.email||null}});return await r.$disconnect(),!0}catch(s){return console.error(`Error syncing job ${e} to database:`,s),!1}}async function d(){if(l.size()>0){console.log("In-memory jobs already exist, skipping database load");return}try{console.log("Loading hardcoded user jobs from database");let e=(0,t.b)(),s=await e.job.findMany({where:{userId:{startsWith:"hardcoded-"}},include:{results:!0}});for(let e of(console.log(`Found ${s.length} jobs for hardcoded users in database`),s)){console.log(`Loading job ${e.id} for user ${e.userId} with ${e.results.length} results`);let s=e.results.map(e=>({website:e.website,email:e.email}));l.set(e.id,{id:e.id,name:e.name||"Unnamed Job",status:e.status,sheetUrl:e.sheetUrl,columnName:e.columnName,totalWebsites:e.totalUrls,processedWebsites:e.results.length,progress:e.progress||0,results:s,createdAt:e.createdAt.toISOString(),updatedAt:e.updatedAt.toISOString(),userId:e.userId})}await e.$disconnect(),console.log(`Loaded ${l.size()} jobs into memory store`),console.log(`In-memory jobs map status - Size: ${l.size()}`),l.values().forEach(e=>{console.log(`Memory job: ${e.id} - User: ${e.userId} - Status: ${e.status} - Created: ${e.createdAt}`)})}catch(e){console.error("Error loading jobs from database:",e)}}},12909:(e,s,r)=>{r.d(s,{Nh:()=>u,_W:()=>l});var t=r(13581);r(16467);var a=r(31183),o=r(5486);r(96330);let n=[{username:"lee",password:"funnelstrike@135"},{username:"sankalp",password:"funnelstrike@135"}];async function l(){let e=(0,a.b)();try{for(let s of n)try{let r=`hardcoded-${s.username.toLowerCase()}`;if(await e.user.findUnique({where:{id:r}}))console.log(`Hardcoded user ${r} already exists`);else{let t=await (0,o.hash)(s.password,10);await e.user.create({data:{id:r,name:s.username,email:`${s.username}@example.com`,password:t}}),console.log(`Created hardcoded user: ${r}`)}}catch(e){console.error(`Error processing user ${s.username}:`,e)}}catch(e){console.error("Error initializing users:",e)}finally{await e.$disconnect()}}let i={adapter:void 0,client:void 0};async function d(e,s){let r=[{username:"sankalp",password:"funnelstrike@135",name:"Sankalp Demo"},{username:"lee",password:"funnelstrike@135",name:"Lee Demo"}].find(r=>r.username===e&&r.password===s);return r?{id:`hardcoded-${r.username}`,name:r.name,email:`${r.username}@example.com`}:null}i.client&&process.on("beforeExit",()=>{i.client?.$disconnect()});let u={...i.adapter?{adapter:i.adapter}:{},providers:[(0,t.A)({name:"credentials",credentials:{email:{label:"Username",type:"text"},password:{label:"Password",type:"password"}},async authorize(e){if(!e?.email||!e?.password)return null;try{e.email.includes("@"),e.email;let s=await d(e.email,e.password);if(s)return s;return null}catch(e){return console.error("Authentication error:",e),null}}})],session:{strategy:"jwt"},secret:process.env.NEXTAUTH_SECRET,debug:!1,pages:{signIn:"/auth/signin"},callbacks:{session:async({session:e,token:s})=>(s&&e.user&&(e.user.id=s.sub),e)}}},31183:(e,s,r)=>{r.d(s,{b:()=>o});var t=r(96330);let a=0;function o(){let e=++a;console.log(`Creating new Prisma client instance #${e}`);let s=process.env.DATABASE_URL||"",r=s.includes("?")?`${s}&connection_limit=1&pool_timeout=0&statement_cache_size=0&connection_id=${e}`:`${s}?connection_limit=1&pool_timeout=0&statement_cache_size=0&connection_id=${e}`;return new t.PrismaClient({datasourceUrl:r,log:["error"]})}global.prisma||(global.prisma=new t.PrismaClient({log:["error"]}))}};