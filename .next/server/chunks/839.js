"use strict";exports.id=839,exports.ids=[839],exports.modules={11323:(e,o,r)=>{r.d(o,{bt:()=>d,deleteJob:()=>i,hardcodedJobs:()=>l,wv:()=>c});var s=r(31183),t=r(84113);let a=new Map,n=()=>{},l={set:(e,o)=>{a.set(e,o),n()},get:e=>a.get(e),has:e=>a.has(e),delete:e=>{let o=a.delete(e);return n(),o},clear:()=>{a.clear(),n()},size:()=>null==a?0:a.size,values:()=>null==a?[]:Array.from(a.values()),getJobsForUser:e=>null==a?[]:Array.from(a.values()).filter(o=>o.userId===e),generateJobId:()=>(0,t.A)()};async function i(e){console.log(`Attempting to delete job: ${e}`);try{if(l.has(e)){let o=l.get(e);console.log(`Found job ${e} in memory, user: ${o?.userId}, status: ${o?.status}`);let r=l.delete(e);console.log(`Deleted job ${e} from memory: ${r?"success":"failed"}`)}else console.log(`Job ${e} not found in memory store`);try{let o=(0,s.b)();if(await o.job.findUnique({where:{id:e},select:{id:!0}})){try{console.log(`Deleting results for job ${e}...`);let r=await o.result.deleteMany({where:{jobId:e}});console.log(`Deleted ${r.count} results for job ${e}`)}catch(o){console.error(`Error deleting results for job ${e}:`,o)}try{console.log(`Deleting job ${e} from database...`),await o.job.delete({where:{id:e}}),console.log(`Successfully deleted job ${e} from database`)}catch(o){throw console.error(`Error deleting job ${e} from database:`,o),o}}else console.log(`Job ${e} not found in database, nothing to delete`);return await o.$disconnect(),!0}catch(o){if(console.error(`Database error while deleting job ${e}:`,o),!l.has(e))return!0;throw o}}catch(o){return console.error(`Critical error deleting job ${e}:`,o),l.has(e)&&(console.log(`Forcing memory deletion for job ${e} after error`),l.delete(e)),!1}}async function d(e){if(!l.has(e))return console.log(`Job ${e} not found in memory store for syncing`),!1;let o=l.get(e);if(!o)return!1;try{let r=(0,s.b)();if(console.log(`Syncing job ${e} to database - Status: ${o.status}, Progress: ${o.progress}`),await r.job.update({where:{id:e},data:{status:o.status,progress:o.progress||0}}),o.results&&o.results.length>0)for(let s of(console.log(`Syncing ${o.results.length} results for job ${e}`),o.results))await r.result.findFirst({where:{jobId:e,website:s.website}})||await r.result.create({data:{jobId:e,website:s.website,email:s.email||null}});return await r.$disconnect(),!0}catch(o){return console.error(`Error syncing job ${e} to database:`,o),!1}}async function c(){if(l.size()>0){console.log("In-memory jobs already exist, skipping database load");return}try{console.log("Loading hardcoded user jobs from database");let e=(0,s.b)(),o=await e.job.findMany({where:{userId:{startsWith:"hardcoded-"}},include:{results:!0}});for(let e of(console.log(`Found ${o.length} jobs for hardcoded users in database`),o)){console.log(`Loading job ${e.id} for user ${e.userId} with ${e.results.length} results`);let o=e.results.map(e=>({website:e.website,email:e.email}));l.set(e.id,{id:e.id,name:e.name||"Unnamed Job",status:e.status,sheetUrl:e.sheetUrl,columnName:e.columnName,totalWebsites:e.totalUrls,processedWebsites:e.results.length,progress:e.progress||0,results:o,createdAt:e.createdAt.toISOString(),updatedAt:e.updatedAt.toISOString(),userId:e.userId})}await e.$disconnect(),console.log(`Loaded ${l.size()} jobs into memory store`),console.log(`In-memory jobs map status - Size: ${l.size()}`),l.values().forEach(e=>{console.log(`Memory job: ${e.id} - User: ${e.userId} - Status: ${e.status} - Created: ${e.createdAt}`)})}catch(e){console.error("Error loading jobs from database:",e)}}},12909:(e,o,r)=>{r.d(o,{Nh:()=>c,_W:()=>l});var s=r(13581);r(16467);var t=r(31183),a=r(5486);r(96330);let n=[{username:"lee",password:"funnelstrike@135"},{username:"sankalp",password:"funnelstrike@135"}];async function l(){let e=(0,t.b)();try{for(let o of n)try{let r=`hardcoded-${o.username.toLowerCase()}`;if(await e.user.findUnique({where:{id:r}}))console.log(`Hardcoded user ${r} already exists`);else{let s=await (0,a.hash)(o.password,10);await e.user.create({data:{id:r,name:o.username,email:`${o.username}@example.com`,password:s}}),console.log(`Created hardcoded user: ${r}`)}}catch(e){console.error(`Error processing user ${o.username}:`,e)}}catch(e){console.error("Error initializing users:",e)}finally{await e.$disconnect()}}let i={adapter:void 0,client:void 0};async function d(e,o){let r=[{username:"sankalp",password:"funnelstrike@135",name:"Sankalp Demo"},{username:"lee",password:"funnelstrike@135",name:"Lee Demo"}].find(r=>r.username===e&&r.password===o);return r?{id:`hardcoded-${r.username}`,name:r.name,email:`${r.username}@example.com`}:null}i.client&&process.on("beforeExit",()=>{i.client?.$disconnect()});let c={...i.adapter?{adapter:i.adapter}:{},providers:[(0,s.A)({name:"credentials",credentials:{email:{label:"Username",type:"text"},password:{label:"Password",type:"password"}},async authorize(e){if(!e?.email||!e?.password)return null;try{e.email.includes("@"),e.email;let o=await d(e.email,e.password);if(o)return o;return null}catch(e){return console.error("Authentication error:",e),null}}})],session:{strategy:"jwt"},secret:process.env.NEXTAUTH_SECRET,debug:!1,pages:{signIn:"/auth/signin"},callbacks:{session:async({session:e,token:o})=>(o&&e.user&&(e.user.id=o.sub),e)}}},31183:(e,o,r)=>{r.d(o,{b:()=>a});var s=r(96330);let t=0;function a(){let e=++t;console.log(`Creating new Prisma client instance #${e}`);let o=process.env.DATABASE_URL||"",r=o.includes("?")?`${o}&connection_limit=1&pool_timeout=0&statement_cache_size=0&connection_id=${e}`:`${o}?connection_limit=1&pool_timeout=0&statement_cache_size=0&connection_id=${e}`;return new s.PrismaClient({datasourceUrl:r,log:["error"]})}global.prisma||(global.prisma=new s.PrismaClient({log:["error"]}))}};