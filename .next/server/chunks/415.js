"use strict";exports.id=415,exports.ids=[415],exports.modules={65796:(e,t,o)=>{o.d(t,{loadJobsFromDatabase:()=>f});var n=o(96330);let s=0;global.prisma||(global.prisma=(()=>{try{return console.log("Creating global Prisma client instance"),new n.PrismaClient({log:["error"]})}catch(e){throw console.error("Failed to create global Prisma client:",e),e}})());var a=o(55511),r=o.n(a);let i=new Uint8Array(256),l=i.length,c=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,d=[];for(let e=0;e<256;++e)d.push((e+256).toString(16).substr(1));let m=function(e,t=0){let o=(d[e[t+0]]+d[e[t+1]]+d[e[t+2]]+d[e[t+3]]+"-"+d[e[t+4]]+d[e[t+5]]+"-"+d[e[t+6]]+d[e[t+7]]+"-"+d[e[t+8]]+d[e[t+9]]+"-"+d[e[t+10]]+d[e[t+11]]+d[e[t+12]]+d[e[t+13]]+d[e[t+14]]+d[e[t+15]]).toLowerCase();if(!("string"==typeof o&&c.test(o)))throw TypeError("Stringified UUID is invalid");return o},u=new Map,g=()=>{},b={set:(e,t)=>{u.set(e,t),g()},get:e=>u.get(e),size:()=>null==u?0:u.size,values:()=>null==u?[]:Array.from(u.values())};async function f(){b.size(),console.log(`In-memory jobs before database load: ${b.size()}`);try{console.log("Loading hardcoded user jobs from database");let e=function(){let e=++s;console.log(`Creating new Prisma client instance #${e}`);try{let t=process.env.DATABASE_URL||"";if(!t)throw console.error("DATABASE_URL is not defined in environment variables"),Error("Database connection string is missing");let o=process.env.POSTGRES_URL_NON_POOLING||t,s=o.includes("?")?`${o}&connection_limit=1&pool_timeout=20&connect_timeout=10&statement_cache_size=0&connection_id=${e}`:`${o}?connection_limit=1&pool_timeout=20&connect_timeout=10&statement_cache_size=0&connection_id=${e}`,a=new n.PrismaClient({datasourceUrl:s,log:["error"]}),r=a.$connect.bind(a);return a.$connect=async()=>{let t;for(let o=1;o<=3;o++)try{return console.log(`Connection attempt ${o} for client #${e}`),await r()}catch(e){if(t=e,console.error(`Connection attempt ${o} failed:`,e),o<3){let e=500*Math.pow(3,o-1);console.log(`Retrying in ${e}ms...`),await new Promise(t=>setTimeout(t,e))}}throw t},a}catch(e){return console.error("Failed to create Prisma client:",e),new n.PrismaClient}}(),t=await e.job.findMany({where:{userId:{startsWith:"hardcoded-"}},include:{results:!0}});for(let e of(console.log(`Found ${t.length} jobs for hardcoded users in database`),t)){let t=e.id,o=b.get(t),n={id:e.id,name:e.name||"Unnamed Job",status:e.status,sheetUrl:e.sheetUrl,columnName:e.columnName,totalWebsites:e.totalUrls,processedWebsites:e.results.length,progress:e.progress||0,results:e.results.map(e=>({website:e.website,email:e.email})),createdAt:e.createdAt.toISOString(),updatedAt:e.updatedAt.toISOString(),userId:e.userId};if(o){let s=new Date(e.updatedAt),a=new Date(o.updatedAt);s>a?(console.log(`Job ${t} found in both memory and database - using newer database version`),b.set(t,n)):console.log(`Job ${t} found in both memory and database - keeping memory version`)}else console.log(`Job ${t} found only in database - adding to memory`),b.set(t,n)}let o=new Set(t.map(e=>e.id)),a=b.values().filter(e=>!o.has(e.id));console.log(`Found ${a.length} jobs in memory that are not in database`),await e.$disconnect(),console.log(`Final job count in memory store: ${b.size()}`),console.log(`In-memory jobs map status - Size: ${b.size()}`),b.values().forEach(e=>{console.log(`Memory job: ${e.id} - User: ${e.userId} - Status: ${e.status} - Created: ${e.createdAt}`)})}catch(e){console.error("Error loading jobs from database:",e)}}}};