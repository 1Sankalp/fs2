"use strict";exports.id=415,exports.ids=[415],exports.modules={65796:(e,t,s)=>{s.d(t,{loadJobsFromDatabase:()=>f});var o=s(96330);let r=0;global.prisma||(global.prisma=new o.PrismaClient({log:["error"]}));var a=s(55511),n=s.n(a);let i=new Uint8Array(256),l=i.length,d=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,c=[];for(let e=0;e<256;++e)c.push((e+256).toString(16).substr(1));let u=function(e,t=0){let s=(c[e[t+0]]+c[e[t+1]]+c[e[t+2]]+c[e[t+3]]+"-"+c[e[t+4]]+c[e[t+5]]+"-"+c[e[t+6]]+c[e[t+7]]+"-"+c[e[t+8]]+c[e[t+9]]+"-"+c[e[t+10]]+c[e[t+11]]+c[e[t+12]]+c[e[t+13]]+c[e[t+14]]+c[e[t+15]]).toLowerCase();if(!("string"==typeof s&&d.test(s)))throw TypeError("Stringified UUID is invalid");return s},m=new Map,g=()=>{},b={set:(e,t)=>{m.set(e,t),g()},size:()=>null==m?0:m.size,values:()=>null==m?[]:Array.from(m.values())};async function f(){if(b.size()>0){console.log("In-memory jobs already exist, skipping database load");return}try{console.log("Loading hardcoded user jobs from database");let e=function(){let e=++r;console.log(`Creating new Prisma client instance #${e}`);let t=process.env.DATABASE_URL||"",s=t.includes("?")?`${t}&connection_limit=1&pool_timeout=0&statement_cache_size=0&connection_id=${e}`:`${t}?connection_limit=1&pool_timeout=0&statement_cache_size=0&connection_id=${e}`;return new o.PrismaClient({datasourceUrl:s,log:["error"]})}(),t=await e.job.findMany({where:{userId:{startsWith:"hardcoded-"}},include:{results:!0}});for(let e of(console.log(`Found ${t.length} jobs for hardcoded users in database`),t)){console.log(`Loading job ${e.id} for user ${e.userId} with ${e.results.length} results`);let t=e.results.map(e=>({website:e.website,email:e.email}));b.set(e.id,{id:e.id,name:e.name||"Unnamed Job",status:e.status,sheetUrl:e.sheetUrl,columnName:e.columnName,totalWebsites:e.totalUrls,processedWebsites:e.results.length,progress:e.progress||0,results:t,createdAt:e.createdAt.toISOString(),updatedAt:e.updatedAt.toISOString(),userId:e.userId})}await e.$disconnect(),console.log(`Loaded ${b.size()} jobs into memory store`),console.log(`In-memory jobs map status - Size: ${b.size()}`),b.values().forEach(e=>{console.log(`Memory job: ${e.id} - User: ${e.userId} - Status: ${e.status} - Created: ${e.createdAt}`)})}catch(e){console.error("Error loading jobs from database:",e)}}}};