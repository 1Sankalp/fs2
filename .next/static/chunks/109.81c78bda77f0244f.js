"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[109],{3109:(e,o,t)=>{t.d(o,{loadJobsFromDatabase:()=>d});var a=t(6671),n=t(459);let r=0;t.g.prisma||(t.g.prisma=(()=>{try{return console.log("Creating global Prisma client instance"),new a.PrismaClient({log:["error"]})}catch(e){throw console.error("Failed to create global Prisma client:",e),e}})()),t(621);let s=new Map,c=()=>{try{let e=localStorage.getItem("hardcodedJobs");if(e)try{let o=JSON.parse(e),t=Array.isArray(o)?o:o.jobs;Array.isArray(t)&&(console.log("Loading ".concat(t.length," jobs from localStorage").concat(Array.isArray(o)?"":" (saved at ".concat(o.lastSaved,")"))),s.clear(),t.forEach(e=>{e&&e.id&&s.set(e.id,e)}),console.log("Successfully loaded ".concat(s.size," jobs from localStorage")))}catch(e){console.error("Error parsing jobs from localStorage:",e)}else console.log("No jobs found in localStorage")}catch(e){console.error("Error loading jobs from localStorage:",e)}},l=()=>{try{let e=Array.from(s.values()),o={jobs:e,lastSaved:new Date().toISOString()};localStorage.setItem("hardcodedJobs",JSON.stringify(o)),console.log("Saved ".concat(e.length," jobs to localStorage at ").concat(o.lastSaved))}catch(e){console.error("Error saving jobs to localStorage:",e)}},i={set:(e,o)=>{s.set(e,o),l()},get:e=>s.get(e),size:()=>null==s?0:s.size,values:()=>null==s?[]:Array.from(s.values())};async function d(){c(),i.size(),console.log("In-memory jobs before database load: ".concat(i.size()));try{console.log("Loading hardcoded user jobs from database");let e=function(){let e=++r;console.log("Creating new Prisma client instance #".concat(e));try{let o=n.env.DATABASE_URL||"";if(!o)throw console.error("DATABASE_URL is not defined in environment variables"),Error("Database connection string is missing");let t=n.env.POSTGRES_URL_NON_POOLING||o,r=t.includes("?")?"".concat(t,"&connection_limit=1&pool_timeout=20&connect_timeout=10&statement_cache_size=0&connection_id=").concat(e):"".concat(t,"?connection_limit=1&pool_timeout=20&connect_timeout=10&statement_cache_size=0&connection_id=").concat(e),s=new a.PrismaClient({datasourceUrl:r,log:["error"]}),c=s.$connect.bind(s);return s.$connect=async()=>{let o;for(let t=1;t<=3;t++)try{return console.log("Connection attempt ".concat(t," for client #").concat(e)),await c()}catch(e){if(o=e,console.error("Connection attempt ".concat(t," failed:"),e),t<3){let e=500*Math.pow(3,t-1);console.log("Retrying in ".concat(e,"ms...")),await new Promise(o=>setTimeout(o,e))}}throw o},s}catch(e){return console.error("Failed to create Prisma client:",e),new a.PrismaClient}}(),o=await e.job.findMany({where:{userId:{startsWith:"hardcoded-"}},include:{results:!0}});for(let e of(console.log("Found ".concat(o.length," jobs for hardcoded users in database")),o)){let o=e.id,t=i.get(o),a={id:e.id,name:e.name||"Unnamed Job",status:e.status,sheetUrl:e.sheetUrl,columnName:e.columnName,totalWebsites:e.totalUrls,processedWebsites:e.results.length,progress:e.progress||0,results:e.results.map(e=>({website:e.website,email:e.email})),createdAt:e.createdAt.toISOString(),updatedAt:e.updatedAt.toISOString(),userId:e.userId};if(t){let n=new Date(e.updatedAt),r=new Date(t.updatedAt);n>r?(console.log("Job ".concat(o," found in both memory and database - using newer database version")),i.set(o,a)):console.log("Job ".concat(o," found in both memory and database - keeping memory version"))}else console.log("Job ".concat(o," found only in database - adding to memory")),i.set(o,a)}let t=new Set(o.map(e=>e.id)),s=i.values().filter(e=>!t.has(e.id));console.log("Found ".concat(s.length," jobs in memory that are not in database")),l(),await e.$disconnect(),console.log("Final job count in memory store: ".concat(i.size())),console.log("In-memory jobs map status - Size: ".concat(i.size())),i.values().forEach(e=>{console.log("Memory job: ".concat(e.id," - User: ").concat(e.userId," - Status: ").concat(e.status," - Created: ").concat(e.createdAt))})}catch(e){console.error("Error loading jobs from database:",e)}}}}]);