// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  jobs          Job[]
  @@map("users")
}

// NextAuth Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// NextAuth Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// VerificationToken model for email verification
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Scraping Job model
model Job {
  id               String        @id @default(cuid())
  userId           String
  name             String?
  sheetUrl         String
  columnName       String
  status           String      @default("pending")
  progress         Float         @default(0)
  totalUrls        Int           @default(0)
  processedUrls    Int           @default(0)
  error            String?
  startedAt        DateTime?
  completedAt      DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  isDeleted        Boolean       @default(false)
  currentUrl       String?
  extractedEmails  EmailResult[]
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  results          Result[]
  @@index([userId])
  @@map("jobs")
}

// Scraping Results model
model EmailResult {
  id        String   @id @default(cuid())
  jobId     String
  website   String
  email     String?
  createdAt DateTime @default(now())
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
}

// Result model for extracted emails
model Result {
  id            String    @id @default(cuid())
  website       String
  email         String?
  createdAt     DateTime  @default(now())
  
  // Relations
  jobId         String
  job           Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  
  @@index([jobId])
  @@map("results")
}

// Job Status enum
enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  PAUSED
}
